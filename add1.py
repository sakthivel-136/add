# -*- coding: utf-8 -*-
"""add1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19EsA4l0hKthA0kN_9WfSpFfg-2x_1Icp
"""



import streamlit as st
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.feature_extraction.text import TfidfVectorizer

# Set up the Streamlit page
st.set_page_config(page_title="Kamaraj College FAQ Chatbot", layout="centered")

# Load model and data (with caching)
@st.cache_resource
def load_model_and_data():
    # Load the dataset
    df = pd.read_csv("kamaraj_college_faq.csv")
    df.dropna(inplace=True)

    # Encode answers to numerical labels
    le = LabelEncoder()
    df["Answer_Label"] = le.fit_transform(df["Answer"])

    # Vectorize questions
    vectorizer = TfidfVectorizer()
    X = vectorizer.fit_transform(df["Question"])
    y = df["Answer_Label"]

    # Train a logistic regression model
    model = LogisticRegression()
    model.fit(X, y)

    return model, vectorizer, le

# Load model, vectorizer, and encoder
model, vectorizer, label_encoder = load_model_and_data()

# App title
st.title("🎓 Kamaraj College FAQ Chatbot")
st.markdown("Ask me anything related to **Kamaraj College of Engineering and Technology**! 🤖")

# User input
user_question = st.text_input("💬 Type your question here:")

# Button to get answer
if st.button("🔍 Get Answer"):
    if not user_question.strip():
        st.warning("⚠️ Please enter a valid question.")
    else:
        # Vectorize user input and predict answer
        user_vector = vectorizer.transform([user_question])
        predicted_label = model.predict(user_vector)[0]
        predicted_answer = label_encoder.inverse_transform([predicted_label])[0]

        # Display answer
        st.success(f"🟢 **Answer:** {predicted_answer}")

!pip install streamlit pandas scikit-learn
!pip install speech_recognition pyttsx3

pip install streamlit pyttsx3 SpeechRecognition pyaudio

!pip install SpeechRecognition
!pip install pyttsx3

import speech_recognition as sr
import pyttsx3
import tempfile
import os

import streamlit as st
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.feature_extraction.text import TfidfVectorizer

# Setup
st.set_page_config(page_title="Kamaraj College FAQ Chatbot", layout="centered")

@st.cache_resource
def load_model_and_data():
    ques = pd.read_csv("kamaraj_college_faq.csv")
    ques.dropna(inplace=True)

    le = LabelEncoder()
    ques["Answer_Label"] = le.fit_transform(ques["Answer"])

    vectorizer = TfidfVectorizer()
    X = vectorizer.fit_transform(ques["Question"])
    y = ques["Answer_Label"]

    model = LogisticRegression()
    model.fit(X, y)

    return model, vectorizer, le

model, vectorizer, label_encoder = load_model_and_data()

st.title("🎓 Kamaraj College FAQ Chatbot")
st.write("Ask any question related to **Kamaraj College of Engineering and Technology**:")

# Choose input method
option = st.radio("Choose input method:", ["📝 Text", "🎤 Voice"])

# Initialize speech engine
def speak(text):
    engine = pyttsx3.init()
    engine.setProperty('rate', 150)
    engine.say(text)
    engine.runAndWait()

def recognize_speech():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        st.info("🎙️ Listening... Speak your question")
        audio = recognizer.listen(source)
    try:
        text = recognizer.recognize_google(audio)
        st.success(f"🗣️ You said: {text}")
        return text
    except sr.UnknownValueError:
        st.error("❌ Could not understand audio")
        return ""
    except sr.RequestError:
        st.error("⚠️ Could not request results from the speech recognition service")
        return ""

# Input
if option == "📝 Text":
    user_question = st.text_input("💬 Enter your question:")
elif option == "🎤 Voice":
    if st.button("🎙️ Start Recording"):
        user_question = recognize_speech()
    else:
        user_question = ""

# Prediction
if st.button("🔍 Get Answer"):
    if user_question.strip() == "":
        st.warning("⚠️ Please enter or speak a question.")
    else:
        vector = vectorizer.transform([user_question])
        prediction = model.predict(vector)[0]
        answer = label_encoder.inverse_transform([prediction])[0]
        st.success(f"🟢 Answer: {answer}")
        speak(answer)
